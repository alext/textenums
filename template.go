// Copyright 2017 Google Inc. All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to writing, software distributed
// under the License is distributed on a "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.

// Added as a .go file to avoid embedding issues of the template.

package main

import "text/template"

var generatedTmpl = template.Must(template.New("generated").Parse(`
// generated by textenums {{.Command}}; DO NOT EDIT

package {{.PackageName}}

import (
    "fmt"
)

{{range $typename, $values := .TypesAndValues}}

var (
    _{{$typename}}NameToValue = map[string]{{$typename}} {
        {{range $values}}"{{.}}": {{.}},
        {{end}}
    }

    _{{$typename}}ValueToName = map[{{$typename}}]string {
        {{range $values}}{{.}}: "{{.}}",
        {{end}}
    }
)

// MarshalText is generated so {{$typename}} satisfies encoding.TextMarshaler.
func (r {{$typename}}) MarshalText() ([]byte, error) {
    s, ok := _{{$typename}}ValueToName[r]
    if !ok {
        return nil, fmt.Errorf("invalid {{$typename}}: %d", r)
    }
    return []byte(s), nil
}

// UnmarshalText is generated so {{$typename}} satisfies encoding.TextUnmarshaler.
func (r *{{$typename}}) UnmarshalText(data []byte) error {
    v, ok := _{{$typename}}NameToValue[string(data)]
    if !ok {
        return fmt.Errorf("invalid {{$typename}} '%s'", data)
    }
    *r = v
    return nil
}

{{end}}
`))
